{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["moment","locale","Chart","state","confirmed","dates","recovered","updateConfirmed","updateRecovered","Axios","get","then","response","all","data","country_name","toLowerCase","res","map","item","Date","format","Cases","i","length","push","console","log","setState","style","width","labels","this","datasets","label","fill","borderColor","pointRadius","pointBorderWidth","pointBackgroundColor","lineTension","backgroundColor","Component","App","useEffect","startDate","getTime","endDate","duration","month","parseInt","Math","random","durationRemainder","AppBar","position","Toolbar","variant","Typography","Container","fixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19db778c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/vi\"\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nmoment.locale(\"vi\");\r\nexport default class Chart extends Component {\r\n  state = {\r\n    confirmed: [],\r\n    dates: [],\r\n    recovered: [],\r\n    updateConfirmed: [],\r\n    updateRecovered: [],\r\n  };\r\n  componentDidMount() {\r\n    Axios.get(\r\n      \"https://api.ipdata.co/?api-key=77c1ffbb8a17b90760b1bf78304ae94541c6300de1908abd7ea9a524\"\r\n    )\r\n      .then((response) => {\r\n        function getConfirmed() {\r\n          return Axios.get(\r\n            `https://api.covid19api.com/dayone/country/${response.data.country_name.toLowerCase()}/status/confirmed`\r\n          );\r\n        }\r\n        function getRecovered() {\r\n          return Axios.get(\r\n            `https://api.covid19api.com/dayone/country/${response.data.country_name.toLowerCase()}/status/recovered`\r\n          );\r\n        }\r\n\r\n        return Axios.all([getRecovered(), getConfirmed()]);\r\n      })\r\n      .then((res) => {\r\n        // console.log(res[0].data);\r\n        let dates = res[0].data.map((item) => {\r\n          return moment(item.Date).format(\"ll\");\r\n        });\r\n        let recovered = res[0].data.map((item) => {\r\n          return item.Cases;\r\n        });\r\n        let confirmed = res[1].data.map((item) => {\r\n          return item.Cases;\r\n        });\r\n        let updateConfirmed = [];\r\n        let updateRecovered = [];\r\n        for (let i = 0; i < confirmed.length; i++) {\r\n          if (i === 0) {\r\n            updateConfirmed.push(confirmed[i]);\r\n            updateRecovered.push(recovered[i]);\r\n          } else {\r\n            updateConfirmed[i] = confirmed[i] - confirmed[i - 1];\r\n            updateRecovered[i] = recovered[i] - recovered[i - 1];\r\n          }\r\n        }\r\n        console.log(updateConfirmed);\r\n        console.log(confirmed);\r\n\r\n        this.setState({\r\n          dates,\r\n          recovered,\r\n          confirmed,\r\n          updateConfirmed,\r\n          updateRecovered,\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{width: 800}}>\r\n        <Line\r\n          data={{\r\n            labels: this.state.dates,\r\n            datasets: [\r\n              {\r\n                label: \"Tổng số ca mắc\",\r\n                fill: false,\r\n                borderColor: \"rgba(235, 0, 31,1)\",\r\n                data: this.state.confirmed,\r\n                pointRadius: 1,\r\n                pointBorderWidth: 1,\r\n                pointBackgroundColor: \"#fff\",\r\n              },\r\n              {\r\n                label: \"Số ca hồi phục\",\r\n                fill: true,\r\n                lineTension: 0.5,\r\n                backgroundColor: \"rgba(255, 187, 0, 0.4)\",\r\n                borderColor: \"#ffbb00\",\r\n                pointRadius: 1,\r\n                pointBorderWidth: 1,\r\n                pointBackgroundColor: \"#fff\",\r\n                data: this.state.recovered,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n        <Line\r\n          data={{\r\n            labels: this.state.dates,\r\n            datasets: [\r\n              {\r\n                label: \"Tổng số ca mắc trong ngày\",\r\n                fill: false,\r\n                borderColor: \"rgba(235, 0, 31,0.8)\",\r\n                pointRadius: 1,\r\n                pointBorderWidth: 1,\r\n                pointBackgroundColor: \"#fff\",\r\n                data: this.state.updateConfirmed,\r\n              },\r\n              {\r\n                label: \"Số ca hồi phục trong ngày\",\r\n                fill: true,\r\n                lineTension: 0.5,\r\n                backgroundColor: \"rgba(255, 187, 0, 0.4)\",\r\n                pointRadius: 1,\r\n                pointBorderWidth: 1,\r\n                pointBackgroundColor: \"#fff\",\r\n                borderColor: \"#ffbb00\",\r\n                data: this.state.updateRecovered,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Chart from \"./components/Chart\";\r\nimport { Container, Typography, AppBar, Toolbar } from \"@material-ui/core\";\r\n// import \"./App.css\";\r\n// import Register from \"./components/Register\";\r\n// import Numbers from \"./components/Numbers\";\r\nimport moment from \"moment\";\r\n// import Editor from \"./components/Editor\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    console.log(\"Hello\");\r\n    moment.locale(\"vi\");\r\n    let startDate = new Date(moment().format(\"l\"));\r\n    console.log(startDate.getTime());\r\n    let endDate = new Date(\"5/30/2020\");\r\n    console.log(endDate.getTime());\r\n    let duration = (endDate - startDate) / (1000 * 3600 * 24);\r\n\r\n    let month = parseInt(Math.random()) ? 31 : 30;\r\n\r\n    let durationRemainder = duration % month;\r\n    console.log(month);\r\n    console.log(\r\n      `You have estimately ${parseInt(\r\n        duration / month\r\n      )} month(s) and ${durationRemainder} day(s) left`\r\n    );\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\">Biểu đồ COVID-19 tại nơi bạn ở</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        {/* <Numbers /> */}\r\n        <Chart />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}